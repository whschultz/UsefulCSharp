// Useful C#
// Copyright (C) 2015-2016 Nicholas Randal
// 
// Useful C# is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

using System;
using System.Collections.Generic;

namespace Randal.Core.T4
{
	public static class CodeGeneratorExtensions
	{
		public static string ToFullyFormattedCode(this IReadOnlyList<DbCodeDefinition> codes, string @namespace, string @enum, string? type = null)
		{
			if(string.IsNullOrWhiteSpace(@namespace))
				throw new ArgumentException("A valid namespace name is required.", nameof(@namespace));

			if (string.IsNullOrWhiteSpace(@enum))
				throw new ArgumentException("A valid enum name is required.", nameof(@enum));

			var formattedType = string.IsNullOrWhiteSpace(type) ? string.Empty : $" : {type!.Trim()}";

			var definition = string.Join("\r\n\t\t", codes.ToCodeLines());

			@enum = @enum.Trim();

			return
$@"{Constants.AutoGeneratedWarning()}

using System.ComponentModel.DataAnnotations;

namespace {@namespace.Trim()}
{{
	/// <summary>
	/// Contains the values for {@enum}
	/// </summary>
	public enum {@enum}{formattedType}
	{{
		{definition}
	}}
}}";
		}

		public static IReadOnlyList<string> ToCodeLines(this IReadOnlyList<DbCodeDefinition> codes)
		{
			var lines = new List<string>();

			try
			{
				foreach (var code in codes)
				{
					var description = code.Description.Trim();
					if (!description.EndsWith(".") && !description.EndsWith("?") && !description.EndsWith("!"))
						description += '.';

					lines.Add("/// <summary>");
					lines.Add($"/// {code.NameAsCSharpProperty} ({code.Code}). {description}");
					lines.Add("/// </summary>");
					lines.Add($"[{ObsoleteAttribute(code)}Display(Name = \"{code.DisplayName}\", Description = \"{description}\")]");
					lines.Add($"{code.NameAsCSharpProperty} = {code.Code},");
					lines.Add(string.Empty);
				}

				if (lines.Count > 2)
				{
					lines.RemoveAt(lines.Count - 1);
					lines[lines.Count - 1] = lines[lines.Count - 1].TrimEnd(',');
				}
			}
			catch (Exception ex)
			{
				lines.Clear();
				lines.Add("/*");
				lines.Add(ex.ToString());
				lines.Add("*/");
			}

			return lines.AsReadOnly();
		}

		private static string ObsoleteAttribute(DbCodeDefinition code)
		{
			return code.IsObsolete ? "Obsolete, " : string.Empty;
		}
	}
}